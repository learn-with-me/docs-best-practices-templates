{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Just copy &amp; past any templates that you may find usefule.</p>","tags":["mkdocs","template","best-practices"]},{"location":"#adding-shields","title":"Adding Shields","text":"<p>Shields are buttons/tags that display current health of the project. One of the popular project supporting these shields is shields.io</p> <p>Note: the template already uses shields to display them where appropriate.</p>","tags":["mkdocs","template","best-practices"]},{"location":"career-leveling-guide/","title":"Career Leveling Guide","text":""},{"location":"career-leveling-guide/#principal-engineer","title":"Principal+ Engineer","text":"Category Criteria Scope and Complexity You identify and are given the hardest organization-level problems to solve. You may be responsible for a significant resources/budget, and if so, use them judiciously. You define long-term technical roadmaps and organization objectives for up to a year or more, and other documentation. Risk Management Manage/identify organizational wide risk. Architect to reduce risk inline with cross company initiatives. Domain Expertise (Knowledge) Able to contribute insights outside of core domains of expertise. You effectively influence the decisions made by senior leaders and x-functional teams. Trail Blazing. Defines the techniques which later become industry standards. Develops and protects Intellectual Property for the business. Big Picture Play a large role in defining the company's <code>bigger picture</code>. Align engineering capability and product strategy on up to 3-5 year time frame. Influence and Impact Organization/Company (150+). Multiple Departmental functions (e.g. Marketing + Core Product) Leadership / Ownership You are an owner in the business, defining the culture within engineering and routinely spanning multiple functions (e.g. Legal, Marketing, Product)  to ensure our roadmap is strategic on all dimensions. Responsibility/Direction Required/Ownership Drive company initiatives from inception to release without regular technical oversight. You build technical leaders of the organization, structuring efforts to help others develop their potential by giving them appropriate ownership and responsibility. You know when to step in and when not to. You are mindful of the power your perspective has on discussions. You have significant expertise in your field. You are recognized internally as a thought leader. Communication You communicate a strategic direction. Your role often requires you to collaborate and negotiate with stakeholders, executive leadership, vendors, and company partners. Lead company wide technical dialog. You foster a collaborative and inclusive culture across the organization and company, where ideas and discussions are respected at all levels. If you have an external facing role, you are trusted to represent the company on matters of great significance. Team Contribution - People &amp; Culture Your work has significant impact on one or more organizations. You may have a global impact on technologies, products, customers, or partners. You contribute by making major influencing innovations and/or setting a vision for a critical technology. You influence broadly within the company, driving policies, best practices and new approaches for excellence in your field. Mentors across company and industry. Crafts engineering culture for both the organization as well as the company. Delivery Strong evidence of consistent operational improvement across multiple dimensions of our technology capability. Specifically (but not limited to) reducing cost, improving stability, horizontal scaling, reducing time to market. Ambiguity &amp; Judgement Extreme tolerance for ambiguity balanced judgement."},{"location":"career-leveling-guide/#principal-engineer_1","title":"Principal Engineer","text":"Category Criteria Scope and Complexity Proactively and Consistently take ownership over significantly complex problems that span multiple teams and at times the entire organization. Own technical roadmapping for multiple quarters to a year where the long-term business and/or technology strategy may not clear. Clear ability to translate <code>direction</code> and <code>end result</code> into <code>actionable steps based on available resources</code>. A Principal Engineer can articulate how to take a group from <code>here</code> to <code>there</code> in pragmatic stages whilst delivering business results. Risk Management Manage/identify organizational wide risk. Architect to reduce risk inline with cross company initiatives. Domain Expertise (Knowledge) Carrying domain expertise outside of their organization and establishing best practices across the company. Trusted advisor to senior leadership. Demonstrates domain knowledge about other areas of the organization. Big Picture Lead product strategy discussions with senior management representing your teams and organization. Awareness of our business performance and strong partnership with key stakeholders to drive business outcomes. Influence and Impact Organization (50+). Department Function e.g. Cardio Leadership / Ownership You are an owner in the business, defining the culture within engineering and routinely spanning multiple functions (e.g. Legal, Marketing, Product)  to ensure our roadmap is strategic on all dimensions. Responsibility/Direction Required/Ownership You use your significant expertise and high judgment to incorporate diverse inputs from customers and stakeholders into a cohesive technical vision, strategy, and/or solution. Reduce complexity through good architectural practices impacting the entire organization. Drive organization initiatives from inception to release without regular technical oversight. Communication You are a critical bridge between senior leadership and your organization, making sure expectations are aligned. Engaged in company wide technical dialog. Coordinate problem solving across many internal and external teams, focused on long-term goals and critically important priorities. Sharing knowledge outside the team in various formats is expected, ability to translate engineering concepts to business partners.  Should be leading conversations with relevant business and product partners. Team Contribution - People &amp; Culture Significant track record of mentorship and leveling up teams, technical leadership across organization boundaries, and collaboration. Aid in recruiting of excellent talent and leaders to their organization. Instrumental in improving cross-team and organizational efficiency, partnering across organizational lines. Your work impacts the way an organization operates (strategic decisions, goals, prioritization, team implementation). You consistently raise the bar.  Pro-actively identifying new dimensions and initiatives that can enrich our community. You use your influence to gain buy in and support, soliciting input across the organization and blazing the trail for others to follow. Delivery Strong evidence of consistent operational improvement across multiple dimensions of our technology capability. Specifically (but not limited to) reducing cost, improving stability, horizontal scaling, reducing time to market. Ambiguity &amp; Judgement Extreme tolerance for ambiguity balanced judgement. Seen as a leader in the organization and responsible to tamp down the entropy."},{"location":"career-leveling-guide/#sr-staff-engineer","title":"Sr Staff Engineer","text":"Category Criteria Scope and Complexity Proactively and Consistently take ownership over ambiguous, complex, and large initiatives that require delegation, collaboration, investigation. Own technical roadmapping for your domain and be able to operate where the short-term business and/or technology strategy is not clear. Proficient in scoping problems and organizing projects across teams. Influences decisions around design solutions that must be able to provide a platform/reusable solution for various problems, rather than just problem at hand. Thinks long term and big picture initiatives. Exhibits high judgement to navigate the grey area between <code>ideal solution</code> and <code>possible solution based on available resources</code>. Risk Management Manages priorities, tradeoffs, forecast/manage risk, identify and direct solutions in cross-team deliverables. Orchestrate team deliverables and priorities to minimize risk across multiple projects and teams. Domain Expertise (Knowledge) Is a leader within their organization in domain of expertise and proactively explores new technologies (hands on) to understand how they may be relevant to us. Evaluate options and provide recommendations on scope and scale of effort required to implement final requirements. Proactively identifies opportunities for strategic investment and can form actionable proposals that articulate risk/reward benefits at a team or cross-team level. Big Picture Work in collaboration with Sr management/product to turn product strategy into action. Direct product execution. Understanding of engineering in how they contribute to product metrics, execution and customer experience. Awareness of our business performance and emergent partnership with key stakeholders to drive business outcomes. Influence and Impact Team/Partner Teams (30-50). Consistently impacting multiple teams in a Department function or Domain. You are a strong collaborator able to partner with core-capabilities (e.g. platform) teams and drive the requirements for shared capabilities (e.g. API Gateway). Leadership / Ownership Your presence on the team up-levels those around you. Your inclusion on the team automatically reduces risk; either delivery or operational support. Responsibility/Direction Required/Ownership You use your expertise and judgment to analyze and define the problem or opportunity, identify risks and constraints, and influence an actionable strategy. Provide direction in large cross-functional initiatives. Highly autonomous requiring no oversight. Communication Team levels up and learns new skills as a result of your input. Track record of written and oral communication excellence. Able to facilitate a contentious discussion and drive correct decision making even if unpopular. You communicate regularly with senior management and stakeholders who provide feedback and direction. You lead by example by practicing open and respectful dialogue. You influence others to improve processes and drive projects forward. You coordinate across different groups and create formal networks of people to get things done. You are mastering negotiating priorities and trade-offs. Team Contribution - People &amp; Culture Track record of mentorship, technical leadership, and collaboration. Aid in recruiting of excellent talent. Instrumental in improving team efficiency. Contribute to the strategic organization design of the department. Continued and constant mentorship of fellow team members. Sponsorship of more junior engineers. You're setting teams and engineers up for success. You set the standard for how they operate. You influence team policies. Modeling the way - you consistently embody the culture laid out by the organization and are a <code>culture carrier</code>. As a Sr Staff you begin to raise the bar and break new ground in how we operate and evolve our team culture and development practices. Delivery You have a strategic mindset demonstrated through delivery of complex initiatives that enable/unlock other teams and/or competitive advantage in the marketplace. Ambiguity &amp; Judgement High tolerance for ambiguous situations over an extended period. Able to partner with leadership and influence the team to help the group navigate through ambiguous situations"},{"location":"career-leveling-guide/#staff-engineer","title":"Staff Engineer","text":"Category Criteria Scope and Complexity Proactively and Consistently take ownership over ambiguous, complex, and large initiatives that require delegation, collaboration, investigation. Own technical roadmapping for your domain and are able to operate where the short-term business and/or technology strategy is not clear. You avoid reinventing the wheel and leverage org-wide capabilities as appropriate.  Able to scope problems and organize projects across teams. Design solutions must be able to provide a platform/reusable solution for various problems, rather than just problem at hand. Risk Management Manage priorities, tradeoffs, forecast/manage risk, identify and implement solutions in cross-team deliverables. Sequence deliverables/manage priorities to minimize risk across multiple projects and teams. Proactively Identifying Operational Risk (software versions, security, experience/feature risk) and determine/propose remediation. Domain Expertise (Knowledge) Is a leader within their organization in domain of expertise. Understands scope and scale of effort required to implement final requirements. Acute awareness of industry standards and high-judgement exhibited on pros and cons of bleeding edge techniques. Big Picture Work in collaboration with management/product to turn product strategy into action. You are an enabler for product execution. Clear articulation of how engineering contributes to product metrics, execution and customer experience. Influence and Impact Team/Partner Teams (15-30). Multiple teams in a Departmental function or Domain. You are a strong collaborator able to partner with core-capabilities (e.g. platform) teams to leverage shared capabilities and drive alignment. Leadership / Ownership Your presence on the team up-levels those around you. Your inclusion on the team automatically reduces risk; either delivery or operational support. Responsibility/Direction Required/Ownership You use your expertise and judgment to analyze and define the problem or opportunity, identify risks and constraints, and propose an actionable strategy. Provide direction in large cross-functional initiatives. Deliver work with infrequent oversight. Communication Team levels up and learns new skills as a result of your input. Track record of written and oral communication excellence. Excellent Presentation skills and ability to Facilitate a large-room discussion. You communicate regularly with senior management and stakeholders who provide feedback and direction. You participate in and encourage an open and respectful dialogue. You interact with others to improve processes and drive projects forward. You coordinate across different groups and create formal networks of people to get things done. You are learning how to negotiate priorities and trade-offs Team Contribution - People &amp; Culture Track record of mentorship, technical leadership, and collaboration. Aid in recruiting of excellent talent. Instrumental in improving team efficiency. Continued and constant mentorship of fellow team members. You're setting teams and engineers up for success. You set the standard for how they operate. You influence team policies. Modeling the way - you consistently embody the culture laid out by the organization and are a <code>culture carrier</code> Delivery Strategic Capabilities Ambiguity &amp; Judgement High tolerance for ambiguous situations over an extended period"},{"location":"career-leveling-guide/#readiness-check","title":"Readiness check","text":"Category Criteria Scope and Complexity Pro-actively step forward to take ownership over ambiguous, complex, and large initiatives. Scope problems and break down tasks for yourself and other engineers in a team. Proactive in identifying dependencies across teams. Exhibit versatility in your ability and willingness to take on new challenges across the full-stack. Risk Management Manage priorities, tradeoffs, forecast/manage risk, identify, implement, and oversee solutions in team deliverables. Sequence deliverables and manage priorities to minimize risk. Proactively Identifying Operational Risk (software versions, security, experience/feature risk) Domain Expertise (Knowledge) Expert in domain of expertise. Clear demonstration of architectural and systems thinking. Strong awareness of industry standards including forward looking and emergent standards. Able to bring those lessons into the team in a pragmatic way. Trusted advisor and teacher for more junior team members. Big Picture Strong understanding of and involvement in product strategy, can recommend and drive solutions for critical issues. Strong understanding of how product initiatives affect product metrics and objectives. Influence and Impact Team (5-15). Emergent skills across multiple teams (AND / OR) You are the <code>tech</code> lead for the team Leadership / Ownership You routinely lead the way, bringing new optimizations and process improvements to bear within your team. Responsibility/Direction Required/Ownership Self directed, lead team in deliverables, drive increases in team velocity. On-call ownership of service or functional area, ability to own improvement of a running service. Identify and proactively drive areas of improvement/risk. Utilize expertise to manage project priorities\u2019 deadlines. Communication Enable team as a result of your input which is given without being explicitly solicited. Over communication is expected: Strong track record of being able to drive conversation, collaborate on solutions, and build consensus. Sharing knowledge across teams in various formats is expected. Proficient in working with other teams to accomplish your goals. Strong collaboration with Staff+ SWE to drive consistency Team Contribution - People &amp; Culture Values the success of the team over their individual progress, and is consistently taking leadership over delivering outcomes. Has mentored several junior engineers, delegating previous responsibilities to others. Drive consensus and direction. You drive changes to policies and establish new procedures related to hiring, interviewing, onboarding etc. Actively participate in the recruiting process. Active participant in our company culture. Pro-active in establishing team-cohesion and shared team identity. Delivery Entire Features leveraging strategic capabilities Ambiguity &amp; Judgement Able to maintain momentum and navigate through MEDIUM term ambiguity"},{"location":"career-leveling-guide/#sr-software-engineer","title":"Sr Software Engineer","text":"Category Criteria Scope and Complexity Display ownership over complex, and large initiatives that include a medium degree of ambiguity. Scope problems and break down tasks for yourself and other engineers on the team. Risk Management Manage priorities, tradeoffs, forecast/manage risk, identify and implement solutions in team deliverables. Sequence deliverables/manage priorities to minimize risk. Domain Expertise (Knowledge) Expert in domain of expertise. Clear demonstration of architectural and systems thinking. Beginning to have awareness of industry standards. Trusted advisor and teacher for more junior team members. Big Picture Clear understanding of product strategy, can recommend solutions to critical issues. Understanding of how product initiatives affect product metrics and objectives. Influence and Impact Team (3-8). Begin to see skills go Broad OR Deep. Ready to step up to play the role of Tech lead for the team Leadership / Ownership Demonstrate ownership of specific un-assigned tasks, deliverables and issues, setting the tone for your peers and team members. Working alongside other Sr SWEs on the team. Beginning to lead the way. Responsibility/Direction Required/Ownership Self directed, lead team in deliverables, drive increases in team velocity. On call ownership of service or functional area, ability to own improvement of a running service. Own areas of improvement/risk. Communication Enable team as a result of your input. Over communication is expected: Track record of being able to collaborate on solutions, and build consensus. Sharing knowledge within team in various formats is expected. Proficient in working with other teams to accomplish your goals. Team Contribution - People &amp; Culture Values the success of the team over their individual progress, and is often taking leadership over delivering outcomes. Has mentored at least one junior engineer, delegating previous responsibilities to others. Drive consensus and direction. You recommend changes to policies and establish new procedures related to hiring, interviewing, onboarding etc. Active participant in our company culture. Delivery Entire Features Ambiguity &amp; Judgement Able to maintain momentum and navigate through short term ambiguity"},{"location":"career-leveling-guide/#software-engineer-iii","title":"Software Engineer III","text":"Category Criteria Scope and Complexity Actionable tasks that require both collaboration and disambiguation to complete. Display ownership over medium to large projects and the ability to break out work and drive to completion. Risk Management Forecast/manage risk, identify and implement solutions in own deliverables. Escalation before issues become execution risk. Domain Expertise (Knowledge) Advanced in domain. Familiar in other areas of expertise outside of your team. Big Picture Clear understanding of strategy, can recommend solutions to critical issues. Influence and Impact Peers (2-5) Leadership / Ownership Demonstrate ownership of specific assigned tasks, deliverables and issues, encouraging your peers to resolve as well as making individual contributions. Responsibility/Direction Required/Ownership Self directed, owns completion of assigned projects, significant individual contributor to team velocity. On call duties required, with strong incident management skills. Flag areas of improvement/risk (Kaizen) Communication Go to person for several aspects of the system. Shares their knowledge in various formats within the team as well as other stakeholder teams Team Contribution - People &amp; Culture You are engaged in team meetings arch/tech discussion, and code reviews. You are one of the key representatives for your team. Improve team productivity. Contributes to interviewing process. Active participant in our company culture Delivery Multiple related Epics Ambiguity &amp; Judgement Evidence of balanced judgement and tolerance for ambiguity emerging"},{"location":"career-leveling-guide/#software-engineer-ii","title":"Software Engineer II","text":"Category Criteria Scope and Complexity Actionable tasks that require collaboration to complete. Display ownership over small to medium sized projects. Risk Management Escalate with manager/lead before being blocked. Escalate with manager/lead if blocked. All PRs are tested (ad-hoc and/or automated), able to consistently deploy reliable code without oversight Domain Expertise (Knowledge) Competent in domain, familiar with other areas of domain expertise within the team. Big Picture Awareness and contribution in strategy. Understand product requirements and help product owners refine delegated work. Influence and Impact Self +  Inform manager / mentor of your status. Leadership / Ownership Demonstrate strong ownership of your own individual tasks and medium sized projects Responsibility/Direction Required/Ownership You use your knowledge to propose workable solutions, with some guidance from your manager or more senior peers. On call duties required, escalating as needed Communication Inform your team of status. Shares knowledge with their team with existing processes and documentation. Team Contribution - People &amp; Culture Proficient with team process. Positive influence on team. Can be feature lead with supervision. Involved within interview process for your team. Active participant in our company culture Delivery User Stories &amp; Epics Ambiguity &amp; Judgement Developing"},{"location":"career-leveling-guide/#software-engineer-i","title":"Software Engineer I","text":"Category Criteria Scope and Complexity Actionable, well defined tasks that require little collaboration to complete. Research before asking. Risk Management Following department best practices. Escalate with manager/lead if blocked. All PRs are tested (ad-hoc and/or automated), able to consistently deploy reliable code without oversight Domain Expertise (Knowledge) Learning domain and industry best practices. Big Picture Understands how their work contributes to the team. Influence and Impact Self and possibly your decision making authority.  Inform manager / mentor of your status. Leadership / Ownership Demonstrate strong ownership of your own individual tasks Responsibility/Direction Required/Ownership Daily/weekly guidance from peers / manager. Communication Inform manager / mentor of your status. Team Contribution - People &amp; Culture Learns/follows team process. Active participant in our company culture Delivery User Stories Ambiguity &amp; Judgement Developing"},{"location":"code-review-template/","title":"Code Review Template","text":""},{"location":"code-review-template/#template","title":"Template","text":"<pre><code>[ABCD-1234](https://jira.com/ABCD-1234)\n\n## What does this PR do?\n\nBrief description of the changes in the PR\n\n## Why do we want to do that?\n\nBackground on the problem you\u2019re solving, its origin, and reason for choosing your solution.\n\n## What high level changes did you make to the code to accomplish that goal?\n\n* A bulleted list of changes.\nYou can use the commits list that is auto-populated in the description if it is sufficiently thorough and clear.\n\n## What other information should the reviewer be aware of when looking at this code?\n\nAny additional comments/context/explanations/justifications for decisions made.\n\n## How did you test?\n\nThis section would include how you tested your code changes.\nAnd if someone wishes to verify the functionality, what path they could take.\n\n## [Optional] Pending\n\nOutline the pending work (in bullets) that needs to be done.\n\nAttach screenshots if applicable\n</code></pre>"},{"location":"code-review-template/#things-to-think-about-as-pr-owner","title":"Things to think about as PR owner","text":"<ul> <li>Make sure the right people are indicated as reviewers</li> <li>Amount of information to include in PR description (strongly recommended)<ul> <li>Pull Requests are where we formally communicate our intentions about how to solve problems within the team.</li> <li>There is a problem, though, in that you're trying to convey many hours of work to your co-workers in the space of a few minutes!</li> <li>Do your peers a favor. Include as much information as possible</li> <li>If you have made changes that affect the appearance or behavior of the UI, include screenshots or gifs.</li> </ul> </li> <li>Making PR description effective (where possible)<ul> <li>Including example input and output of the changes, diffs from how it works currently.</li> <li>Comprehensive descriptions of how this will be deployed or used (even vague ideas are helpful here!).</li> <li>Include links to relevant context such as CMs, etc.</li> </ul> </li> <li>Since this is an acceptance and communication platform, please try to get at least two other people from the team involved in the PR before merging.</li> <li>Commits Quality<ul> <li>Simple concise and relevant commits make it easier for reviewers to breakdown the diff and review in parts, when PRs have large amount of changes</li> <li>At times it may not be as simple to do it, however it's worth a try</li> </ul> </li> <li>If your code is not complete, add <code>[WIP]</code> (work in progress) to the pull request name.</li> <li>You are responsible for getting your PR reviewed</li> </ul>"},{"location":"code-review-template/#as-a-reviewer","title":"As a reviewer","text":"<ul> <li>Ask for context if it's not obvious what is happening.</li> <li>Review the code with the coding and architecture guidelines as reference.</li> <li>Ask questions if you're curious about a decision or just want to learn more.</li> <li>Create a corresponding task if you add a comment that should be addressed before the PR is merged.</li> <li>Approve pull requests in one of two ways:<ul> <li>Pull request looks good as is. Approve it.</li> <li>You have comments/ideas/suggestions but overall it looks good. Add tasks to be completed by the reviewee and approve.</li> </ul> </li> <li>If you do not approve a pull request, mention why and create the tasks necessary to earn the approval.</li> </ul>"},{"location":"code-review-template/#references","title":"References","text":"<ul> <li>Pull Request Etiquette blog</li> <li>Tips for Better Pull Request blog</li> <li>How to perfect pull request blog</li> <li>Code Review Culture - Part 1 &amp; Part 2</li> </ul>"},{"location":"design-doc-template/","title":"Design Doc Template","text":"<p>Note: all section are recommended to be required.</p>"},{"location":"design-doc-template/#template","title":"Template","text":"<pre><code>RFC-###: &lt;Title Here&gt;\n\nPrimary author(s):  Who owns this document and should be contacted about it?\nCollaborators:  Who else contributed but isn\u2019t a primary author. Delete this line if none.\nCreated:  YYYY-MM-DD \nLast updated: YYYY-MM-DD \nStakeholders: Who are the teams and individuals that need to know about this RFC.\nCore Reviewers: Pick the review group(s) this most closely aligns to.\nRFC Ticket: Paste in the RFC ticket you created\nExploration Notes: Include relevant links to meeting notes from exploration meetings\nArch Review Notes:  Include relevant links to meeting notes from Arch Review meeting(s)\nRepository link: GitHub repository link\n\n# Overview:\nIf someone only reads this far, what do you want them to know?\n\nWho or what will be impacted:\nTeams\nExternal customers, visitors, merchants, etc?\ndependent services, APIs, applications, etc?\n\n# Goals:\nWhat problems are you trying to solve?\nHow will you measure success?\n\n# Out of Scope:\nWhat problems are you not trying to solve?\n\n# Background &amp; Motivation:\n- What is the current state of the world?\n- Where are we headed with this change?\n- Why now?\n\n# Glossary\nDefine any key terms, acronyms, or internal names used in this RFC, that reviewers may be unaware of.\n\n# Design:\nWhat exactly are you doing? What will the world look like when this is done?\n\nInclude any:\n- Use Cases\n- APIs\n- Architecture and Process Diagrams\n- User Flows\n- Wireframes\n- Design Screenshots\n- Data Models\n- For RFCs that use cloud / a vendor: How much will this cost to run per unit time? (month, year, etc)?\n- Describe the data your solution will need/use/access/create\n- Who will use any data you produce? \n- Finance, Product, Data Science, etc.\n- Consider current data volume, expected growth, data retrieval times, secure storage, and retention needs.\n- Data governance needs, related to both end user control, data retention and employee access.\n\nThis is typically the longest part of this document. Consider adding a link to the epic that is associated with the work.\n\n# Security: \nNote: If there are no security, privacy, or compliance concerns to call out, please leave a note in this section stating, \u201cThere are no concerns to call out at this time\u201d.\n\nIt is better to ask than assume there are no security concerns. Talk to the security team for questions about this section.\n\nWhich security considerations exist?\n\nAll services that provide access to data must have authenticated, limited user access. How are you handling access and authentication?\n\n# Governance, Risk, and Compliance:\nWhat known risks exist?\nHow will this relate to any compliance efforts, like SOX, HIPAA, or GDPR?\nWhat factors may complicate your project?\nInclude: complexity, compatibility, latency, service immaturity, lack of team expertise, etc\u2026\n\n# Dependencies:\nDo owners of downstream microservices or infrastructure know you\u2019re planning to send them traffic? \nAre you changing libraries or APIs that other teams depend on?\nWhat is the time/effort impact on the teams you will be affecting? Quantify this as best as possible.\n\n# Pre-Requisites and Additional Work:\nWhat other projects or RFCs need to happen before this one?\nWhat other projects depend on this one?\n\n# Alternatives Considered/Prior Art:\nNote: If there are no alternative implementations or prior art to draw from, please leave a note in this section stating, \u201cThere is no prior art to address at this time\u201d.\n\nPlease talk to other teams to see what we have done in the past and/or are currently using.\nWhat other approaches did you consider? \nWhat existing solutions are close but not quite right? If these are existing systems, CC their owners on this design.\nHow will this project replace or integrate with the alternatives?\n\n# Operations:\nAre you adding any new regular human processes or sources of operational load?\nHow will CustOps / Finance / IT / etc be impacted? How will their processes change?\nIf this is a new system, who will run it?\n\nWhat are the new observability needs, in terms of failure alerts and performance? \n\nIf you will need extra hardware, compute or database space, explain what/why here too.\n\nWhat communication will be needed for this RFC internally or externally?\n\n# Timeline:\nWhat is the proposed timeline for the implementation?\nWhat deadlines exist for specific tasks?\nWhat major checkpoints should impacted parties be aware of?\nWill deprecations, migrations, documentation, or other processes require updating?\n\n# Approver(s): \nWho are the people whose buy-in you want before implementing? List them here. \n\n| Name | yes / not yet / yes if | Date (YYYY-MM-DD) |\n| ---- | ------------------------ | ----------------- |\n|      |                          |                   |\n\nApprover suggestions:\nInclude the Security Team as an approver when your design involves any of the following:\n- Handling user input\n- Personal, sensitive, or private data\n- Access control\n- Encryption, random number generation, anonymization\n\n# Revisions:\nRFC Created\nUpdate for major changes, including status changes.\n</code></pre>"},{"location":"github-template-project-readme/","title":"Github template project readme","text":""},{"location":"github-template-project-readme/#project-name","title":"Project Name","text":""},{"location":"github-template-project-readme/#about-the-project","title":"About the project","text":"<p>(back to top)</p>"},{"location":"github-template-project-readme/#built-with","title":"Built with","text":""},{"location":"github-template-project-readme/#getting-started","title":"Getting started","text":"<p>(back to top)</p>"},{"location":"github-template-project-readme/#prerequisites","title":"Prerequisites","text":""},{"location":"github-template-project-readme/#installation","title":"Installation","text":""},{"location":"github-template-project-readme/#usage","title":"Usage","text":"<p>(back to top)</p>"},{"location":"github-template-project-readme/#roadmap","title":"Roadmap","text":"<p>(back to top)</p>"},{"location":"github-template-project-readme/#contributing","title":"Contributing","text":"<p>(back to top)</p>"},{"location":"github-template-project-readme/#license","title":"License","text":"<p>(back to top)</p>"},{"location":"github-template-project-readme/#contact","title":"Contact","text":"<p>(back to top)</p>"},{"location":"github-template-project-readme/#acknowledgements","title":"Acknowledgements","text":"<p>(back to top)</p>"},{"location":"hackathon-pitch-template/","title":"Hackathon Pitch Template","text":"<p>Always start with a few images and/or videos</p>"},{"location":"hackathon-pitch-template/#template","title":"Template","text":"<pre><code>## Inspiration\n\n1. Why this project exists?\n2. What made you decide to work on this project?\n3. How would this project help you/your team/community?\n\n## What it does?\n\nProblem this project solves.\n\n## How we built it?\n\nAll that went into building this project.\n\n## Challenges we ran into\n\n1. What slowed you down?\n2. What roadblocks you ran into, that ended up being a blocker?\n\n## Accomplishments we're proud of\n\nAccomplishments that you and your team are proud of.\nAlso the ones that you want everyone to know.\n\n## What we learned\n\nHelpful learnings and pitfalls to avoid\n\n## What's next for &lt;project_name&gt;\n\n1. What plans do we have for this project (roadmap including bug fixes and features)?\n2. What we didn't get to do?\n3. Potential timeline to expect\n4. How and where to follow updates\n\n## Built with\n\nMention the technologies used to built the project\n\n## Credits\n\n1. Team members\n2. Supporting members\n3. Acknowledging dependencies\n</code></pre>"},{"location":"hackathon-pitch-template/#references-inspiration","title":"References &amp; Inspiration","text":"<ul> <li>Atlassian hackathon winners 2022 blog</li> </ul>"},{"location":"post-mortem-template/","title":"Post Mortem Report","text":"<p>${{ env.DAY_OF_WEEK }}</p>","tags":["template","best-practices","retro"]},{"location":"post-mortem-template/#template","title":"Template","text":"<pre><code>Post Mortem Report: &lt;Title&gt;\nIncident Date: Date\nTicket: PRJ-XXX\nContributors: Name 1, Name 2, etc\n\nSummary\nThis is the summary of the issue.\nInclude all relevant facts, observations, events, and screenshots.\n\nImpact\nWho/what was impacted? In what way? To what degree?\n\nRoot Cause\nWhat was the underlying cause of the incident? \n\nResolution\nWhat measures were taken to resolve the issue in the short term?\n\nDetection\nHow was this issue identified and surfaced?\n\nAction Items\nWhat can we do to prevent this from happening again?\nWhat can we do to improve our alerting/monitoring?\nWhat can we do to improve our ability to troubleshoot similar issues?\n\nTimeline\n| Time | Event |\n| ---- | ----- |\n|      |       |\n</code></pre>","tags":["template","best-practices","retro"]},{"location":"project-folder-structure-convention/","title":"Project Folder Structure Convention","text":"<p>We won't always need all the files and folders, however here is a typical project layout:</p> <pre><code>.\n\u251c\u2500\u2500 build                   # Compiled files (alternatively `dist`)\n\u251c\u2500\u2500 docs                    # Documentation files\n\u251c\u2500\u2500 k8s                     # Kubernetes configuration files\n\u251c\u2500\u2500 scripts                 # Bash script files as tools and utilities\n\u251c\u2500\u2500 src                     # Source files (alternatively \"app\" or \"lib\")\n\u251c\u2500\u2500 test                    # Unit tests (alternatively `spec` or `tests`)\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre>"},{"location":"project-folder-structure-convention/#documentation","title":"Documentation","text":"<p>Often it is beneficial to include some reference data into the project, which is usually stored into the <code>docs</code> or, less commonly, into the <code>doc</code> folder.</p>"},{"location":"project-folder-structure-convention/#source","title":"Source","text":"<p>The actual source files of a software project are usually stored inside the <code>src</code> folder. Alternatively, you can put them into the <code>lib</code> (if you're developing a library), or into the <code>app</code> folder (if your application's source files are not supposed to be compiled).</p>"},{"location":"project-folder-structure-convention/#unit-test","title":"Unit Test","text":"<p>Unit tests are usually placed into the <code>test</code> folder or, less commonly, into the <code>spec</code> or <code>tests</code> folder.</p>"},{"location":"project-folder-structure-convention/#license-information","title":"License information","text":"<p>If you want to share your work with others, please consider choosing an open source license and include the text of the license into your project. The text of a license is usually stored in the <code>LICENSE</code> (or <code>LICENSE.txt</code>, <code>LICENSE.md</code>) file in the root of the project.</p> <p>You\u2019re under no obligation to choose a license, but please note that opting out of open source licenses doesn\u2019t mean you\u2019re opting out of copyright law.</p> <p>You\u2019ll have to check with your own legal counsel regarding your particular project, but generally speaking, the absence of a license means that default copyright laws apply. This means that you retain all rights to your source code and that nobody else may reproduce, distribute, or create derivative works from your work. This might not be what you intend.</p> <p>Even in the absence of a license file, you may grant some rights in cases where you publish your source code to a site that requires accepting terms of service. For example, if you publish your source code in a public repository on GitHub, you have accepted the Terms of Service which do allow other GitHub users some rights. Specifically, you allow others to view and fork your repository.</p> <p>For more info on how to choose a license for an open source project, please refer to http://choosealicense.com</p>"},{"location":"interviewing-candidates/","title":"Interviewing Candidates","text":"<p>There is no one way to do it, no best way to do it. Everyone has a different approach, however having a template surely helps.</p>"},{"location":"interviewing-candidates/#prerequisite","title":"Prerequisite","text":"<p>Always have the following checklist prepared before the interview:</p> <ul> <li>[ ] Candidate's resume</li> <li>[ ] Position/Role they are applying for</li> <li>[ ] Job description</li> <li>[ ] Question(s) you're going to ask</li> <li>[ ] Backup question - in case the candidate has seen that question in past or the given question is solved too soon</li> <li>[ ] Rubric they'll be evaluated against</li> </ul>"},{"location":"interviewing-candidates/#tips","title":"Tips","text":"<ol> <li>Make sure you look at the prerequisites</li> <li>Keep a copy of the interview template in an new editable document for you to take notes during an interview</li> <li>Block 15 mins of time just before the interview start to have everything set up</li> <li>Block 15 mins to time right after the interview for writing feedback, while everything is still fresh in your mind.</li> </ol>"},{"location":"interviewing-candidates/phone-screen/","title":"Phone Screen Template","text":""},{"location":"interviewing-candidates/phone-screen/#template","title":"Template","text":"<pre><code>Date:\nCandidate:\nInterviewer:\nPosition applied for:\n\nIntroduction\n------------\nHello [Candidate Name], this is [Your Name] from [Company Name].\nIs this still a good time to chat?\n\nInterview Format\n----------------\nTo set expectations for this round, we'll aim to reserve\n- 10 minutes for introductions\n- 45 minutes for coding exercise\n- 5 minutes for any questions you may have\n\nMy Introduction\n---------------\nAbout me. I have been with the company for about [duration].\nCurrent I work in [team/org name], which is responsible for [description].\n\nYour Introduction\n-----------------\nTell me about yourself.\n\nGetting to know you more\n------------------------\n\n- Motivation to move?\n- Why [Company name]?\n- What are you interested in working on?\n- What is the most challenging project you've worked on?\n- How did you faced those challenges?\n- If you could go back in time, how would you do things differently?\n\nCoding Problem\n--------------\n\n[Problem Statement]\n[Example]\n[Test data with solutions]\n\nQuestions for me\n----------------\n\n</code></pre>"},{"location":"interviewing-candidates/rubric-architecture/","title":"Architecture Rubric","text":"1 2 3 4 5 Context Gathering Candidate refuses to clarify the question or their thought process, and jumps right into diagramming Candidate fails to fully clarify the question or their thought process, leading to extensive modifications needing to be made throughout the interview Candidate is able to ask some questions to clarify the prompt, but requires hand holding from the Interviewer to fully grasp the right approach Candidate is able to clarify the question well, but needs to be prompted to discuss their thought process with the Interviewer before starting Candidate is able to proactively collaborate with the Interviewer to understand the problem and walk through their thought process before starting on their solution Service Design Candidate is unable to make any progress on the question Candidate is able to complete most of the core portion of the question, but is unable to fully implement the solution Candidate is able to complete the core portions of the question, but fails to implement/get to all portions Candidate is able to complete all portions of the question, but fails to reach implementation of the optimal solution Candidate is able to complete all portions of the question in an optimal manner Ambiguity Candidate refuses or fails to adapt their solution to new requirements Candidate needs some hand holding to fully understand the new requirements, and struggles to ideate on solutions without guidance from the Interviewer Candidate needs some hand holding to fully understand the new requirements, but can discuss through their solution for tackling them Candidate needs some hand holding to fully understand the new requirements, and can fully implement new extensions on their solution to accommodate Candidate is able to rapidly and collaboratively work with the Interviewer to design and implement new extensions on their solution for new requirements Database Candidate is unable to pick a database solution Candidate might know one database well/one approach to their data model, but is unable to discuss alternatives or optimizations Candidate has some knowledge on how to reason about their database/data model choices, but are unable to dive deep on pros/cons/alternatives Candidate is able to weigh the pros and cons to their database solution/data model, with prompting from the Interviewer Candidate proactively discusses the pros and cons to their database solution/data model Scale Candidate is unable to discuss scalability of their solution Candidate is able to talk about scaling, but either is inaccurate at points or cannot discuss why they would use a certain scaling optimization vs an alternative one Candidate has some knowledge on how to scale their solution, but misses core components (caching, data replication, etc) Candidate is able to discuss how they can scale their solution, with prompting from the Interviewer Candidate proactively discusses ways they can scale their solution Security Candidate is unable to discuss securing their solution Candidate has some surface-level about how to secure their system, but cannot dive deeper with the Interviewer to discuss Candidate is able to talk about a couple of aspects of securing their system, but have large knowledge gaps during discussions with the Interviewer Candidate is able to comprehensively discuss how their solution can be secured, with prompting from the Interviewer Candidate is able to proactively discuss how their solution can be secured (cookie auth on endpoints, database security, network security, etc) Consistency Candidate is unable to discuss data consistency, either conceptually, or as it pertains to their solution Candidate has some surface-level about how consistency patterns work and what their solution might fit, but cannot dive deeper with the Interviewer to discuss Candidate is able to provide some basic trade-off discussions around their solutions consistency patterns, but has some foundational knowledge gaps in the area Candidate is able to comprehensively explain the tradeoffs and their reasoning for the consistency pattern they\u2019ve established in their solution, with prompting from the interviewer Candidate is able to proactively speak on the consistency of their design, and is able to reason through why their consistency model fits the intended solution"},{"location":"interviewing-candidates/rubric-coding/","title":"Coding Rubric","text":"1 2 3 4 5 Context Gathering Candidate refuses to clarify the question or their thought process, and jumps right into coding Candidate fails to fully clarify the question or their thought process, leading to extensive modifications needing to be made throughout the interview Candidate is able to ask some questions to clarify the prompt, but requires hand holding from the Interviewer to fully grasp the right approach Candidate is able to clarify the question well, but needs to be prompted to discuss their thought process with the Interviewer before starting Candidate is able to proactively collaborate with the Interviewer to understand the problem and walk through their thought process before starting on their solution Code Complete Candidate is unable to make any progress on the question Candidate is able to complete most of the core portion of the question, but is unable to fully implement the solution Candidate is able to complete the core portions of the question, but fails to implement/get to all portions Candidate is able to complete all portions of the question, but fails to reach implementation of the optimal solution Candidate is able to complete all portions of the question in an optimal manner Code Style Candidate opts to keep everything in a single function, with little acknowledgement given to readability or maintainability of how they code Candidate breaks up their code or is able to descriptively name variables, but is inconsistent in doing so Candidate needs to be prompted to think about breaking up code into helper functions, and relies on some vague naming and organizational conventions that require time to explain to the Interviewer Candidate is able to demonstrate foundational knowledge in clean code, opting for any of: descriptive variable naming, clean logic flows, helper functions, and doc comments Candidate proactively considers how the code might be integrated into a larger codebase, with descriptive variable naming, clean logic flows, helper functions, and doc comments Ambiguity Candidate refuses or fails to adapt their solution to new requirements Candidate needs some hand holding to fully understand the new requirements, and struggles to ideate on solutions without guidance from the Interviewer Candidate needs some hand holding to fully understand the new requirements, but can discuss through their solution for tackling them Candidate needs some hand holding to fully understand the new requirements, and can fully implement new extensions on their solution to accommodate Candidate is able to rapidly and collaboratively work with the Interviewer to design and implement new extensions on their solution for new requirements Testing Candidate is unable to, or refuses to identify test cases for their solution that align with the question Candidate is able to discuss test cases that match the question, with prompting from the Interviewer, but fails to consider edge cases (zero inputs, malformed inputs, etc) Candidate is able to talk about potential test cases and potentially implement them, with prompting from the Interviewer Candidate is able to retroactively identify base and edge cases to test their solution that match the question being asked Candidate is able to proactively identify base and edge test cases before diving into their solution, and continually tests their code throughout the interview Space Candidate is unable to discuss the space complexity of their solution Candidate vaguely understands their solution\u2019s space complexity, and with hand holding can reason their way to an accurate evaluation, and potentially discuss optimizations Candidate has some grasp on their solution\u2019s space complexity, and can discuss optimizations when prompted, but is unable to implement proposed optimizations Candidate is able to comprehensively speak to their solution\u2019s space complexity, and optimize on it when prompted Candidate is able to outline the space complexity of their solution during the planning phase, in order to proactively optimize their plan before diving in Time Candidate is unable to discuss the time complexity of their solution Candidate vaguely understands their solution\u2019s time complexity, and with hand holding can reason their way to an accurate evaluation, and potentially discuss optimizations Candidate has some grasp on their solution\u2019s time complexity, and can discuss optimizations when prompted, but is unable to implement proposed optimizations Candidate is able to comprehensively speak to their solution\u2019s time complexity, and optimize on it when prompted Candidate is able to outline the time complexity of their solution during the planning phase, in order to proactively optimize their plan before diving in"},{"location":"interviewing-candidates/rubric-data-architecture/","title":"Data Architecture Rubric","text":"1 2 3 4 5 Context Gathering Candidate refuses to clarify the question or their thought process, and jumps right into diagramming Candidate fails to fully clarify the question or their thought process, leading to extensive modifications needing to be made throughout the interview Candidate is able to ask some questions to clarify the prompt, but requires hand holding from the Interviewer to fully grasp the right approach Candidate is able to clarify the question well, but needs to be prompted to discuss their thought process with the Interviewer before starting Candidate is able to proactively collaborate with the Interviewer to understand the problem and walk through their thought process before starting on their solution Service Design Candidate is unable to make any progress on the question Candidate is able to complete most of the core portion of the question, but is unable to fully implement the solution Candidate is able to complete the core portions of the question, but fails to implement/get to all portions Candidate is able to complete all portions of the question, but fails to reach implementation of the optimal solution Candidate is able to complete all portions of the question in an optimal manner Ambiguity Candidate refuses or fails to adapt their solution to new requirements Candidate needs some hand holding to fully understand the new requirements, and struggles to ideate on solutions without guidance from the Interviewer Candidate needs some hand holding to fully understand the new requirements, but can discuss through their solution for tackling them Candidate needs some hand holding to fully understand the new requirements, and can fully implement new extensions on their solution to accommodate Candidate is able to rapidly and collaboratively work with the Interviewer to design and implement new extensions on their solution for new requirements Scale Candidate is unable to discuss scalability of their solution Candidate is able to talk about scaling, but either is inaccurate at points or cannot discuss why they would use a certain scaling optimization vs an alternative one Candidate has some knowledge on how to scale their solution, but misses core components (caching, data replication, etc) Candidate is able to discuss how they can scale their solution, with prompting from the Interviewer Candidate proactively discusses ways they can scale their solution Data Modeling Candidate is unable to discuss securing their solution Candidate has some surface-level knowledge about how to secure their system, but cannot dive deeper with the Interviewer to discuss Candidate is able to talk about a couple of aspects of securing their system, but have large knowledge gaps during discussions with the Interviewer Candidate is able to comprehensively discuss how their solution can be secured, with prompting from the Interviewer Candidate is able to proactively discuss how their solution can be secured (cookie auth on endpoints, database security, network security, etc) Indexes Candidate is unable to discuss indexes, either conceptually, or as it pertains to their solution Candidate has some surface-level knowledge about how to incorporate indexes into their solution, but cannot dive deeper with the Interviewer to discuss Candidate is able to talk about a couple of ways that indexes would help their solution, but have large knowledge gaps during discussions with the Interviewer Candidate is able to comprehensively discuss how their solution can benefit from indexes, with prompting from the Interviewer Candidate is able to proactively discuss how their solution\u2019s data can be indexed, the benefits of doing so, and the tradeoffs of creating some indexes vs others Sharding Candidate is unable to discuss sharding, either conceptually, or as it pertains to their solution Candidate has some surface-level knowledge about how to incorporate sharding into their solution, but cannot dive deeper with the Interviewer to discuss Candidate is able to talk about a couple of ways that sharding would help their solution, but have large knowledge gaps during discussions with the Interviewer Candidate is able to comprehensively discuss how their solution can benefit from sharding, with prompting from the Interviewer, and can effectively reason around how the data should be split across shards Candidate is able to proactively discuss how their solution\u2019s data can be sharded, the benefits gained from sharding the data Consistency Candidate is unable to discuss data consistency, either conceptually, or as it pertains to their solution Candidate has some surface-level about how consistency patterns work and what their solution might fit, but cannot dive deeper with the Interviewer to discuss Candidate is able to provide some basic trade-off discussions around their solutions consistency patterns, but has some foundational knowledge gaps in the area Candidate is able to comprehensively explain the tradeoffs and their reasoning for the consistency pattern they\u2019ve established in their solution, with prompting from the interviewer Candidate is able to proactively speak on the consistency of their design, and is able to reason through why their consistency model fits the intended solution"}]}